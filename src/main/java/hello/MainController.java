package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.persistence.OneToOne;
import javax.validation.Valid;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final ClientRepository ClientRepository;

    @Autowired
    public MainController(ClientRepository ClientRepository) {
        this.ClientRepository = ClientRepository;
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Client> getAllUsers() {
        // This returns a JSON or XML with the users
        return ClientRepository.findAll();
    }

    @GetMapping(path="/addn") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String nom
            , @RequestParam String prenom) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Client n = new Client();
        n.setNom(nom);
        n.setPrenom(prenom);
        ClientRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/count")
    public @ResponseBody long CountUsers()
    {
        return ClientRepository.count();

    }
//    @RequestMapping(value="/demo/add", method= RequestMethod.POST)
//    public Client createUser(@Valid @RequestBody Client client )
//    {
//        return ClientRepository.save(client);
//    }

    @PostMapping(path="/add")
    public @ResponseBody Client createUser(@Valid @RequestBody Client client)
    {
        return ClientRepository.save(client);
    }

    @GetMapping(path="/showC") // Show one user with his accounts
    public @ResponseBody
    Client ShowOneClient (@RequestParam Integer id_client) {
        {
//            SHOW CLIENT.NOM, CLIENT.PRENOM WHERE CLIENT.ID = int
            return ClientRepository.findById(id_client).get();


        }
    }
    @GetMapping(path="/showA") // Show accounts linked to ID CLIENT
    public @ResponseBody
    Client ShowAccount (@RequestParam Integer id_client) {

            {
            return ClientRepository.findById(id_client).orElse(null);
            }
    }
}



